name: microservices
networks:
  microservices_network:
    driver: bridge
services:
  mongo:
    build:
      dockerfile: ./mongo/Dockerfile
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD
    ports:
      - '$MONGO_PORT:27017'
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    healthcheck:
      test: echo "
        try { rs.status() }
        catch (err) {
          rs.initiate({
            _id:'rs0',
            members:[
              { _id:0, host:'mongo:27017' }
            ]
          })
        }" | mongosh --port 27017 -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin
      interval: 60s
      timeout: 15s
      start_period: 15s
      retries: 10
    networks:
      - microservices_network
    volumes:
      - microservices_db:/data/db

  valkey:
    image: valkey/valkey:8.0
    container_name: cache
    ports:
      - '$CACHE_PORT:6379'
    networks:
      - microservices_network
    volumes:
      - microservices_cache:/data

  mailer:
    image: harrynguyen27798/mail-service:1.0.2
    container_name: mailer
    ports:
      - '50051:50051'
    environment:
      AWS_REGION: $AWS_REGION
      AWS_SES_SENDER_EMAIL: $AWS_SES_SENDER_EMAIL
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    networks:
      - microservices_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - microservices_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      # enable logger
      - GF_LOG_MODE=console
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alermanager:debug ngalert:debug
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices_network

  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    ports:
      - '3307:3306'
    healthcheck:
      test: mysqladmin ping -u root --password=$MYSQL_ROOT_PASSWORD
      timeout: 60s
      retries: 10
    volumes:
      - microservices_mysql:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - microservices_network

  # Kafka visualization tool
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8080:8080' # Map Kafka UI to port 8080 on the host
    depends_on:
      kafka1:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: env-ddd # Cluster name
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092 # Cluster bootstrap servers
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - microservices_network

  # Kafka cluster
  kafka1:
    image: 'bitnami/kafka:3.5'
    container_name: kafka1
    ports:
      - '9192:9092' # Broker port
      - '9193:9094' # Controller port
    environment:
      ### General configurations
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Define Kafka server-side socket listening ports
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      # Define security protocols
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      # Set advertised listener
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://localhost:9193,PLAINTEXT://kafka1:9092
      # Interbroker listener name
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Cluster ID for Kafka, must be the same across the cluster. Use a generated UUID
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
      # Cluster address
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093
      # Allow PLAINTEXT listener (default is false; not recommended for production)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Set maximum and initial memory for the broker
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      # Enable auto-creation of topics
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # Message retention period (in milliseconds), set to 7 days
      - KAFKA_LOG_RETENTION_MS=604800000
      ### Broker configurations
      # Define external access address (host IP and port) -> get Ip: run docker inspect kafka1
      # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA1_IP}:9092
      # Broker ID, must be unique
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
    volumes:
      - microservices_kafka_data:/bitnami/kafka
    networks:
      - microservices_network
    healthcheck:
      test: [ 'CMD', 'kafka-topics.sh', '--list', '--bootstrap-server', 'localhost:9092' ]
      interval: 5s
      timeout: 10s
      retries: 10

volumes:
  microservices_db:
  microservices_cache:
  grafana_data:
  prometheus_data:
  microservices_mysql:
  microservices_kafka_data: