name: microservices
networks:
  microservices_network:
    driver: bridge
services:
  mongo:
    build:
      dockerfile: ./mongo/Dockerfile
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD
    ports:
      - '$MONGO_PORT:27017'
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
    healthcheck:
      test: echo "
        try { rs.status() }
        catch (err) {
          rs.initiate({
            _id:'rs0',
            members:[
              { _id:0, host:'mongo:27017' }
            ]
          })
        }" | mongosh --port 27017 -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin
      interval: 60s
      timeout: 15s
      start_period: 15s
      retries: 10
    networks:
      - microservices_network
    volumes:
      - microservices_db:/data/db

  valkey:
    image: valkey/valkey:8.0
    container_name: cache
    ports:
      - '$CACHE_PORT:6379'
    networks:
      - microservices_network
    volumes:
      - microservices_cache:/data

  mailer:
    image: harrynguyen27798/mail-service:1.0.2
    container_name: mailer
    ports:
      - '50051:50051'
    environment:
      AWS_REGION: $AWS_REGION
      AWS_SES_SENDER_EMAIL: $AWS_SES_SENDER_EMAIL
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    networks:
      - microservices_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - microservices_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      # enable logger
      - GF_LOG_MODE=console
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alermanager:debug ngalert:debug
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices_network

volumes:
  microservices_db:
  microservices_cache:
  grafana_data:
  prometheus_data: